name: "[PRO][PUBLISH]"

on:
  push:
    branches: [ master ]
    
jobs:
  
  Build_And_Deploy:
    if: "contains(github.event.head_commit.message, 'release:')"
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: master

      - name: Make version_checker.sh executable
        run: chmod +x ./version_checker.sh

      - name: Define file name to update version
        run: echo "FILENAME=$(echo './Directory.Build.props')" >> $GITHUB_ENV

      - name: Print the file name to update version
        run: echo $FILENAME

      - name: Get the current version
        run: echo "VERSION=$(grep -Eo '[0-9]\.[0-9]+.[0-9]+' ${{ env.FILENAME }} )" >> $GITHUB_ENV

      - name: Print the current version
        run: echo $VERSION

      - name: Get mayor version
        run: echo "MAYOR=$(echo ${{ env.VERSION }} | cut -f1 -d.)" >> $GITHUB_ENV

      - name: Print mayor version
        run: echo $MAYOR

      - name: Get minor version
        run: echo "MINOR=$(echo ${{ env.VERSION }} | cut -f2 -d.)" >> $GITHUB_ENV

      - name: Print minor version
        run: echo $MINOR

      - name: Get alpha version
        run: echo "ALPHA=$(echo ${{ env.VERSION }} | cut -f3 -d.)" >> $GITHUB_ENV

      - name: Print current alpha version
        run: echo $ALPHA

      - name: Increment version
        run: echo "ALPHA=$(((ALPHA=ALPHA+1)))" >> $GITHUB_ENV

      - name: Alpha version incremented
        run: echo $ALPHA

      - name: Check alpha version
        run: if [[ "$ALPHA" -gt 9 ]]; then echo "MINOR=$(((MINOR=MINOR+1)))" >> $GITHUB_ENV ; echo "ALPHA=$(((ALPHA=0)))" >> $GITHUB_ENV ; fi

      - name: Check minor version
        run: if [[ "$MINOR" -gt 9 ]]; then echo "MAYOR=$(((MAYOR=MAYOR+1)))" >> $GITHUB_ENV; echo "MINOR=$(((MINOR=0)))" >> $GITHUB_ENV; fi

      - name: Create the next version
        run: echo "VERSIONFINAL=$(echo '${{env.MAYOR}}.${{env.MINOR}}.${{env.ALPHA}}')" >> $GITHUB_ENV

      - name: Print the next version
        run: echo $VERSIONFINAL

      - name: Write in filename the next version
        run: sed -i "" "s/$VERSION/$VERSIONFINAL/" Directory.Build.props

      - name: Get the current version
        run: echo "CURRENTVERSION=$(grep -Eo '[0-9]\.[0-9]+.[0-9]+' ${{ env.FILENAME }} )" >> $GITHUB_ENV

      - name: Print the next version
        run: echo $CURRENTVERSION

      - name: setup
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            3.0.x
            3.1.x
            5.0.x
            6.0.x
            7.0.x
            8.0.x
          
      - name: clone Alis
        run: git clone https://github.com/pabllopf/Alis.git --depth=1

      - name: install tools
        run: dotnet tool update -g docfx

      - name: set version 0.1.0 EN
        run: ./version_checker.sh v0.1.0 template_en.json ./docs/en/web_en.json
      - name: create v0.1.0 web EN
        run: docfx ./docs/en/web_en.json

      - name: set version 0.1.0 ES
        run: ./version_checker.sh v0.1.0 template_es.json ./docs/es/web_es.json
      - name: create v0.1.0 web ES
        run: docfx ./docs/es/web_es.json

      - name: set version 0.2.0 EN
        run: ./version_checker.sh v0.2.0 template_en.json ./docs/en/web_en.json
      - name: create v0.2.0 web EN
        run: docfx ./docs/en/web_en.json

      - name: set version 0.2.0 ES
        run: ./version_checker.sh v0.2.0 template_es.json ./docs/es/web_es.json
      - name: create v0.2.0 web ES
        run: docfx ./docs/es/web_es.json

      - name: set version 0.3.0 EN
        run: ./version_checker.sh v0.3.0 template_en.json ./docs/en/web_en.json
      - name: create v0.3.0 web EN
        run: docfx ./docs/en/web_en.json

      - name: set version 0.3.0 ES
        run: ./version_checker.sh v0.3.0 template_es.json ./docs/es/web_es.json
      - name: create v0.3.0 web ES
        run: docfx ./docs/es/web_es.json

      - name: set version 0.4.0 EN
        run: ./version_checker.sh v0.4.0 template_en.json ./docs/en/web_en.json
      - name: create v0.4.0 web EN
        run: docfx ./docs/en/web_en.json

      - name: set version 0.4.0 ES
        run: ./version_checker.sh v0.4.0 template_es.json ./docs/es/web_es.json
      - name: create v0.4.0 web ES
        run: docfx ./docs/es/web_es.json
    
      - name: git config user.name github-actions
        run: git config --global user.name "${{ secrets.USER_NAME }}"

      - name: git config user.email github-actions@github.com
        run: git config --global user.email "${{ secrets.USER_EMAIL }}"

      - name: git config user.name
        run: git config user.name

      - name: git config user.email
        run: git config user.email

      - name: Find common ancestor
        run: git merge-base --fork-point origin/master

      - name: Import bot's GPG key for signing commits
        id: import-gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.BOT_GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.BOT_GPG_PASSPHRASE }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true
          
      - name: git tag 
        run: git tag -s "v${{ env.VERSIONFINAL }}" -m "v${{ env.VERSIONFINAL }}"
        env:
          GITHUB_TOKEN: ${{ secrets.OSLASH_BOT_GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: ${{ secrets.USER_NAME }}
          GIT_AUTHOR_EMAIL: ${{ secrets.USER_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.USER_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.USER_EMAIL }}

      - name: git push --tags
        run: git push --tags
        env:
          GITHUB_TOKEN: ${{ secrets.OSLASH_BOT_GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: ${{ secrets.USER_NAME }}
          GIT_AUTHOR_EMAIL: ${{ secrets.USER_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.USER_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.USER_EMAIL }}

      - name: Update CHANGELOG
        id: changelog
        uses: Requarks/changelog-action@v1
        with:
          token: ${{ github.token }}
          tag: "v${{ env.VERSIONFINAL }}"
          writeToFile: true
          excludeTypes: chore, perf

      - uses: softprops/action-gh-release@v1
        with:
          body: ${{ steps.changelog.outputs.changes }}
          token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          name: "v${{ env.VERSIONFINAL }} has arrived !!!"
          tag_name: "v${{ env.VERSIONFINAL }}"
          generate_release_notes: true
          append_body: true
          files: |
            licence.md
        
      - name: git fetch
        run: git fetch
        
      - name: git checkout master
        run: git checkout master
      
      - name: git pull
        run: git pull

      - name: git add .
        run: git add .

      - name: git commit -S -m "Create the packages of version '$VERSIONFINAL'."
        run: git commit -S -m "Create the packages of version '$VERSIONFINAL'."
        env:
          GITHUB_TOKEN: ${{ secrets.OSLASH_BOT_GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: ${{ secrets.USER_NAME }}
          GIT_AUTHOR_EMAIL: ${{ secrets.USER_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.USER_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.USER_EMAIL }}

      - name: git push
        run: git push
        env:
          GITHUB_TOKEN: ${{ secrets.OSLASH_BOT_GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: ${{ secrets.USER_NAME }}
          GIT_AUTHOR_EMAIL: ${{ secrets.USER_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.USER_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.USER_EMAIL }}
