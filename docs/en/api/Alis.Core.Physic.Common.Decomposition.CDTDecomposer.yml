### YamlMime:ApiPage
title: Class CDTDecomposer
body:
- api1: Class CDTDecomposer
  id: Alis_Core_Physic_Common_Decomposition_CDTDecomposer
  src: https://github.com/pabllopf/Alis/blob/master/4_Operation/Physic/src/Common/Decomposition/CDTDecomposer.cs#L51
  metadata:
    uid: Alis.Core.Physic.Common.Decomposition.CDTDecomposer
    commentId: T:Alis.Core.Physic.Common.Decomposition.CDTDecomposer
- facts:
  - name: Namespace
    value:
      text: Alis.Core.Physic.Common.Decomposition
      url: Alis.Core.Physic.Common.Decomposition.html
  - name: Assembly
    value: Alis.dll
- markdown: >-
    2D constrained Delaunay triangulation algorithm.

    Based on the paper "Sweep-line algorithm for constrained Delaunay triangulation" by V. Domiter and and B. Zalik

    Properties:

    - Creates triangles with a large interior angle.

    - Supports holes

    - Generate a lot of garbage due to incapsulation of the Poly2Tri library.

    - Running time is O(n^2), n = number of vertices.

    - Does not care about winding order.

    Source: http://code.google.com/p/poly2tri/
- code: internal static class CDTDecomposer
- h4: Inheritance
- inheritance:
  - text: object
    url: https://learn.microsoft.com/dotnet/api/system.object
  - text: CDTDecomposer
    url: Alis.Core.Physic.Common.Decomposition.CDTDecomposer.html
- h4: Inherited Members
- list:
  - text: object.Equals(object?)
    url: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - text: object.Equals(object?, object?)
    url: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - text: object.GetHashCode()
    url: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - text: object.GetType()
    url: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - text: object.MemberwiseClone()
    url: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - text: object.ReferenceEquals(object?, object?)
    url: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - text: object.ToString()
    url: https://learn.microsoft.com/dotnet/api/system.object.tostring
- h2: Methods
- api3: ConvexPartition(Vertices)
  id: Alis_Core_Physic_Common_Decomposition_CDTDecomposer_ConvexPartition_Alis_Core_Physic_Common_Vertices_
  src: https://github.com/pabllopf/Alis/blob/master/4_Operation/Physic/src/Common/Decomposition/CDTDecomposer.cs#L56
  metadata:
    uid: Alis.Core.Physic.Common.Decomposition.CDTDecomposer.ConvexPartition(Alis.Core.Physic.Common.Vertices)
    commentId: M:Alis.Core.Physic.Common.Decomposition.CDTDecomposer.ConvexPartition(Alis.Core.Physic.Common.Vertices)
- markdown: Decompose the polygon into several smaller non-concave polygon.
- code: public static List<Vertices> ConvexPartition(Vertices vertices)
- h4: Parameters
- parameters:
  - name: vertices
    type:
    - text: Vertices
      url: Alis.Core.Physic.Common.Vertices.html
- h4: Returns
- parameters:
  - type:
    - text: List
      url: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
    - <
    - text: Vertices
      url: Alis.Core.Physic.Common.Vertices.html
    - '>'
languageId: csharp
metadata:
  description: >-
    2D constrained Delaunay triangulation algorithm.

    Based on the paper "Sweep-line algorithm for constrained Delaunay triangulation" by V. Domiter and and B. Zalik

    Properties:

    - Creates triangles with a large interior angle.

    - Supports holes

    - Generate a lot of garbage due to incapsulation of the Poly2Tri library.

    - Running time is O(n^2), n = number of vertices.

    - Does not care about winding order.

    Source: http://code.google.com/p/poly2tri/
