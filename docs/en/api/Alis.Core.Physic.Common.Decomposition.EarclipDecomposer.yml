### YamlMime:ApiPage
title: Class EarclipDecomposer
body:
- api1: Class EarclipDecomposer
  id: Alis_Core_Physic_Common_Decomposition_EarclipDecomposer
  src: https://github.com/pabllopf/Alis/blob/master/4_Operation/Physic/src/Common/Decomposition/EarclipDecomposer.cs#L46
  metadata:
    uid: Alis.Core.Physic.Common.Decomposition.EarclipDecomposer
    commentId: T:Alis.Core.Physic.Common.Decomposition.EarclipDecomposer
- facts:
  - name: Namespace
    value:
      text: Alis.Core.Physic.Common.Decomposition
      url: Alis.Core.Physic.Common.Decomposition.html
  - name: Assembly
    value: Alis.dll
- markdown: >-
    Convex decomposition algorithm using ear clipping

    Properties:

    - Only works on simple polygons.

    - Does not support holes.

    - Running time is O(n^2), n = number of vertices.

    Source: http://www.ewjordan.com/earClip/
- code: internal static class EarclipDecomposer
- h4: Inheritance
- inheritance:
  - text: object
    url: https://learn.microsoft.com/dotnet/api/system.object
  - text: EarclipDecomposer
    url: Alis.Core.Physic.Common.Decomposition.EarclipDecomposer.html
- h4: Inherited Members
- list:
  - text: object.Equals(object?)
    url: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - text: object.Equals(object?, object?)
    url: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - text: object.GetHashCode()
    url: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - text: object.GetType()
    url: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - text: object.MemberwiseClone()
    url: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - text: object.ReferenceEquals(object?, object?)
    url: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - text: object.ToString()
    url: https://learn.microsoft.com/dotnet/api/system.object.tostring
- h2: Methods
- api3: ConvexPartition(Vertices, float)
  id: Alis_Core_Physic_Common_Decomposition_EarclipDecomposer_ConvexPartition_Alis_Core_Physic_Common_Vertices_System_Single_
  src: https://github.com/pabllopf/Alis/blob/master/4_Operation/Physic/src/Common/Decomposition/EarclipDecomposer.cs#L56
  metadata:
    uid: Alis.Core.Physic.Common.Decomposition.EarclipDecomposer.ConvexPartition(Alis.Core.Physic.Common.Vertices,System.Single)
    commentId: M:Alis.Core.Physic.Common.Decomposition.EarclipDecomposer.ConvexPartition(Alis.Core.Physic.Common.Vertices,System.Single)
- markdown: >-
    Decompose the polygon into several smaller non-concave polygon.

    Each resulting polygon will have no more than Settings.MaxPolygonVertices vertices.
- code: public static List<Vertices> ConvexPartition(Vertices vertices, float tolerance = 0.001)
- h4: Parameters
- parameters:
  - name: vertices
    type:
    - text: Vertices
      url: Alis.Core.Physic.Common.Vertices.html
    description: The vertices.
  - name: tolerance
    type:
    - text: float
      url: https://learn.microsoft.com/dotnet/api/system.single
    description: The tolerance.
    optional: true
- h4: Returns
- parameters:
  - type:
    - text: List
      url: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
    - <
    - text: Vertices
      url: Alis.Core.Physic.Common.Vertices.html
    - '>'
- api3: IsEar(int, float[], float[], int)
  id: Alis_Core_Physic_Common_Decomposition_EarclipDecomposer_IsEar_System_Int32_System_Single___System_Single___System_Int32_
  src: https://github.com/pabllopf/Alis/blob/master/4_Operation/Physic/src/Common/Decomposition/EarclipDecomposer.cs#L303
  metadata:
    uid: Alis.Core.Physic.Common.Decomposition.EarclipDecomposer.IsEar(System.Int32,System.Single[],System.Single[],System.Int32)
    commentId: M:Alis.Core.Physic.Common.Decomposition.EarclipDecomposer.IsEar(System.Int32,System.Single[],System.Single[],System.Int32)
- markdown: Checks if vertex i is the tip of an ear in polygon defined by xv[] and  yv[].
- code: private static bool IsEar(int i, float[] xv, float[] yv, int xvLength)
- h4: Parameters
- parameters:
  - name: i
    type:
    - text: int
      url: https://learn.microsoft.com/dotnet/api/system.int32
    description: The i.
  - name: xv
    type:
    - text: float
      url: https://learn.microsoft.com/dotnet/api/system.single
    - '['
    - ']'
    description: The xv.
  - name: yv
    type:
    - text: float
      url: https://learn.microsoft.com/dotnet/api/system.single
    - '['
    - ']'
    description: The yv.
  - name: xvLength
    type:
    - text: int
      url: https://learn.microsoft.com/dotnet/api/system.int32
    description: Length of the xv.
- h4: Returns
- parameters:
  - type:
    - text: bool
      url: https://learn.microsoft.com/dotnet/api/system.boolean
    description: <code>true</code> if the specified i is ear; otherwise, <code>false</code>.
- h4: Remarks
- markdown: Assumes clockwise orientation of polygon.
- api3: Remainder(int, int)
  id: Alis_Core_Physic_Common_Decomposition_EarclipDecomposer_Remainder_System_Int32_System_Int32_
  src: https://github.com/pabllopf/Alis/blob/master/4_Operation/Physic/src/Common/Decomposition/EarclipDecomposer.cs#L279
  metadata:
    uid: Alis.Core.Physic.Common.Decomposition.EarclipDecomposer.Remainder(System.Int32,System.Int32)
    commentId: M:Alis.Core.Physic.Common.Decomposition.EarclipDecomposer.Remainder(System.Int32,System.Int32)
- markdown: Fix for obnoxious behavior for the % operator for negative numbers...
- code: private static int Remainder(int x, int modulus)
- h4: Parameters
- parameters:
  - name: x
    type:
    - text: int
      url: https://learn.microsoft.com/dotnet/api/system.int32
    description: The x.
  - name: modulus
    type:
    - text: int
      url: https://learn.microsoft.com/dotnet/api/system.int32
    description: The modulus.
- h4: Returns
- parameters:
  - type:
    - text: int
      url: https://learn.microsoft.com/dotnet/api/system.int32
    description: ''
- api3: ResolvePinchPoint(Vertices, out Vertices, out Vertices, float)
  id: Alis_Core_Physic_Common_Decomposition_EarclipDecomposer_ResolvePinchPoint_Alis_Core_Physic_Common_Vertices_Alis_Core_Physic_Common_Vertices__Alis_Core_Physic_Common_Vertices__System_Single_
  src: https://github.com/pabllopf/Alis/blob/master/4_Operation/Physic/src/Common/Decomposition/EarclipDecomposer.cs#L223
  metadata:
    uid: Alis.Core.Physic.Common.Decomposition.EarclipDecomposer.ResolvePinchPoint(Alis.Core.Physic.Common.Vertices,Alis.Core.Physic.Common.Vertices@,Alis.Core.Physic.Common.Vertices@,System.Single)
    commentId: M:Alis.Core.Physic.Common.Decomposition.EarclipDecomposer.ResolvePinchPoint(Alis.Core.Physic.Common.Vertices,Alis.Core.Physic.Common.Vertices@,Alis.Core.Physic.Common.Vertices@,System.Single)
- markdown: >-
    Finds and fixes "pinch points," points where two polygon

    vertices are at the same point.

    If a pinch point is found, pin is broken up into poutA and poutB

    and true is returned; otherwise, returns false.

    Mostly for internal use.

    O(N^2) time, which sucks...
- code: private static bool ResolvePinchPoint(Vertices pin, out Vertices poutA, out Vertices poutB, float tolerance)
- h4: Parameters
- parameters:
  - name: pin
    type:
    - text: Vertices
      url: Alis.Core.Physic.Common.Vertices.html
    description: The pin.
  - name: poutA
    type:
    - text: Vertices
      url: Alis.Core.Physic.Common.Vertices.html
    description: The pout A.
  - name: poutB
    type:
    - text: Vertices
      url: Alis.Core.Physic.Common.Vertices.html
    description: The pout B.
  - name: tolerance
    type:
    - text: float
      url: https://learn.microsoft.com/dotnet/api/system.single
    description: ''
- h4: Returns
- parameters:
  - type:
    - text: bool
      url: https://learn.microsoft.com/dotnet/api/system.boolean
- api3: TriangulatePolygon(Vertices, float)
  id: Alis_Core_Physic_Common_Decomposition_EarclipDecomposer_TriangulatePolygon_Alis_Core_Physic_Common_Vertices_System_Single_
  src: https://github.com/pabllopf/Alis/blob/master/4_Operation/Physic/src/Common/Decomposition/EarclipDecomposer.cs#L80
  metadata:
    uid: Alis.Core.Physic.Common.Decomposition.EarclipDecomposer.TriangulatePolygon(Alis.Core.Physic.Common.Vertices,System.Single)
    commentId: M:Alis.Core.Physic.Common.Decomposition.EarclipDecomposer.TriangulatePolygon(Alis.Core.Physic.Common.Vertices,System.Single)
- markdown: >-
    Triangulates a polygon using simple ear-clipping algorithm. Returns

    size of Triangle array unless the polygon can't be triangulated.

    This should only happen if the polygon self-intersects,

    though it will not _always_ return null for a bad polygon - it is the

    caller's responsibility to check for self-intersection, and if it

    doesn't, it should at least check that the return value is non-null

    before using. You're warned!

    Triangles may be degenerate, especially if you have identical points

    in the input to the algorithm.  Check this before you use them.

    This is totally unoptimized, so for large polygons it should not be part

    of the simulation loop.
- code: private static List<Vertices> TriangulatePolygon(Vertices vertices, float tolerance)
- h4: Parameters
- parameters:
  - name: vertices
    type:
    - text: Vertices
      url: Alis.Core.Physic.Common.Vertices.html
  - name: tolerance
    type:
    - text: float
      url: https://learn.microsoft.com/dotnet/api/system.single
- h4: Returns
- parameters:
  - type:
    - text: List
      url: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
    - <
    - text: Vertices
      url: Alis.Core.Physic.Common.Vertices.html
    - '>'
- h4: Remarks
- markdown: Only works on simple polygons.
languageId: csharp
metadata:
  description: >-
    Convex decomposition algorithm using ear clipping

    Properties:

    - Only works on simple polygons.

    - Does not support holes.

    - Running time is O(n^2), n = number of vertices.

    Source: http://www.ewjordan.com/earClip/
